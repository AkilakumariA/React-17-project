{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport '@tensorflow/tfjs';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nexport default function useTFClassify() {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [predictions, setPredictions] = useState([]);\n\n  function predict(img) {\n    // const img = imageRef.current;\n    setIsLoading(true);\n    mobilenet.load().then(model => {\n      // Classify the image.\n      model.classify(img).then(predictions => {\n        setPredictions(predictions);\n        setIsLoading(false);\n        console.log(predictions);\n      });\n    });\n  }\n\n  return [predict, predictions, isLoading];\n}\n\n_s(useTFClassify, \"d6jV+r7Tpj7N1CjBJBlccEjLICg=\");","map":{"version":3,"sources":["D:/React/react-app-exe3/src/utils/hooks/useTFClassify.js"],"names":["useState","mobilenet","useTFClassify","isLoading","setIsLoading","predictions","setPredictions","predict","img","load","then","model","classify","console","log"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAO,kBAAP;AACA,OAAO,KAAKC,SAAZ,MAA2B,8BAA3B;AAGA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AACpC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;;AACA,WAASO,OAAT,CAAiBC,GAAjB,EAAsB;AAClB;AACAJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAH,IAAAA,SAAS,CAACQ,IAAV,GAAiBC,IAAjB,CAAsBC,KAAK,IAAI;AAC3B;AACAA,MAAAA,KAAK,CAACC,QAAN,CAAeJ,GAAf,EAAoBE,IAApB,CAAyBL,WAAW,IAAI;AACpCC,QAAAA,cAAc,CAACD,WAAD,CAAd;AACAD,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAS,QAAAA,OAAO,CAACC,GAAR,CAAYT,WAAZ;AACH,OAJD;AAKH,KAPD;AAQH;;AAED,SAAO,CAACE,OAAD,EAAUF,WAAV,EAAuBF,SAAvB,CAAP;AACH;;GAjBuBD,a","sourcesContent":["import { useState } from 'react';\r\nimport '@tensorflow/tfjs';\r\nimport * as mobilenet from '@tensorflow-models/mobilenet';\r\n\r\n\r\nexport default function useTFClassify() {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [predictions, setPredictions] = useState([]);\r\n    function predict(img) {\r\n        // const img = imageRef.current;\r\n        setIsLoading(true);\r\n        mobilenet.load().then(model => {\r\n            // Classify the image.\r\n            model.classify(img).then(predictions => {\r\n                setPredictions(predictions);\r\n                setIsLoading(false);\r\n                console.log(predictions);\r\n            });\r\n        });\r\n    }\r\n\r\n    return [predict, predictions, isLoading];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}