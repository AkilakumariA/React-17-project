{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nconst url = process.env.REACT_APP_UNSPLASH_URL;\nconst secret = process.env.REACT_APP_UNSPLASH_KEY;\nexport default function useFetchImage(page) {\n  _s();\n\n  const [Images, setImages] = useState([]);\n  const [errors, setErrors] = useState(initialState);\n  useEffect(() => {\n    axios.get(`${url}?client=${secret}&page=${page}`).then(res => {\n      setImages([...Images, ...res.data]);\n    });\n  }, [page]);\n  return [Images, setImages];\n}\n\n_s(useFetchImage, \"R0Hnqd1mKXNELW6+IQvCJTy1Wvo=\");","map":{"version":3,"sources":["D:/React/react-app-exe3/src/utils/hooks/useFetchImage.js"],"names":["axios","React","useEffect","useState","url","process","env","REACT_APP_UNSPLASH_URL","secret","REACT_APP_UNSPLASH_KEY","useFetchImage","page","Images","setImages","errors","setErrors","initialState","get","then","res","data"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAAxB;AACA,MAAMC,MAAM,GAAGH,OAAO,CAACC,GAAR,CAAYG,sBAA3B;AACA,eAAe,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAAA;;AACxC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAACa,YAAD,CAApC;AACAd,EAAAA,SAAS,CAAC,MAAM;AACZF,IAAAA,KAAK,CAACiB,GAAN,CAAW,GAAEb,GAAI,WAAUI,MAAO,SAAQG,IAAK,EAA/C,EAAkDO,IAAlD,CAAuDC,GAAG,IAAI;AAC1DN,MAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAY,GAAGO,GAAG,CAACC,IAAnB,CAAD,CAAT;AACH,KAFD;AAGH,GAJQ,EAIN,CAACT,IAAD,CAJM,CAAT;AAMA,SAAO,CAACC,MAAD,EAASC,SAAT,CAAP;AACH;;GAVuBH,a","sourcesContent":["import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst url = process.env.REACT_APP_UNSPLASH_URL;\r\nconst secret = process.env.REACT_APP_UNSPLASH_KEY;\r\nexport default function useFetchImage(page) {\r\n    const [Images, setImages] = useState([]);\r\n    const [errors, setErrors] = useState(initialState)\r\n    useEffect(() => {\r\n        axios.get(`${url}?client=${secret}&page=${page}`).then(res => {\r\n            setImages([...Images, ...res.data]);\r\n        });\r\n    }, [page])\r\n\r\n    return [Images, setImages];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}