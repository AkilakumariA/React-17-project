{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\react-app-exe3\\\\src\\\\components\\\\Image.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport useTFClassify from '../utils/hooks/useTFClassify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Image({\n  image,\n  index,\n  handleRemove,\n  show\n}) {\n  _s();\n\n  const [isHovering, setIsHovering] = useState(false);\n  const [predict, predictions, isLoading] = useTFClassify();\n  const imageRef = useRef();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative\",\n    onMouseEnter: () => setIsHovering(true),\n    onMouseLeave: () => setIsHovering(false),\n    children: [(predictions.length > 0 || isLoading) && /*#__PURE__*/_jsxDEV(\"span\", {\n      class: \"absolute bg-gray-800 text-white rounded-lg shadow px-2 left-0 ml-5\",\n      children: predictions.map(prediction => /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"flex justify-between text-sm\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: prediction.className\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [Math.floor(prediction.probability * 100), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      className: `fas fa-times absolute right-0 cursor-pointer opacity-25 hover:opacity-100 ${isHovering ? '' : 'hidden'}`,\n      onClick: () => handleRemove(index)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      className: `fas fa-search absolute left-0 cursor-pointer opacity-25 hover:opacity-100 ${isHovering ? '' : 'hidden'}`,\n      onClick: () => predict(imageRef.current)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      ref: imageRef,\n      onClick: show,\n      src: image,\n      alt: \"nature\",\n      width: \"100%\",\n      height: \"auto\",\n      crossOrigin: \"anonymous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n} // const types = {\n//     function(props, propName) {\n//         if (typeof props[propName] !== 'function') {\n//             return new Error(`'${propName}' must be a function but you have provided ${typeof props[propName]}`);\n//         }\n//     }, number(props, propName) {\n//         if (typeof props[propName] !== 'number') {\n//             return new Error(`'${propName}' must be a number but you have provided ${typeof props[propName]}`);\n//         }\n//     }\n// }\n\n\n_s(Image, \"hN70DX/s6iPh7gciRxPshZRGv1s=\", false, function () {\n  return [useTFClassify];\n});\n\n_c = Image;\nImage.propTypes = {\n  // show: types.function,\n  // index: types.number,\n  show: PropTypes.func,\n  index: PropTypes.number,\n  image: PropTypes.string,\n  handleRemove: PropTypes.func\n};\nexport default Image;\n\nvar _c;\n\n$RefreshReg$(_c, \"Image\");","map":{"version":3,"sources":["D:/React/react-app-exe3/src/components/Image.js"],"names":["React","useRef","useState","PropTypes","useTFClassify","Image","image","index","handleRemove","show","isHovering","setIsHovering","predict","predictions","isLoading","imageRef","length","map","prediction","className","Math","floor","probability","current","propTypes","func","number","string"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,aAAP,MAA0B,8BAA1B;;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAT;AAAgBC,EAAAA,YAAhB;AAA8BC,EAAAA;AAA9B,CAAf,EAAqD;AAAA;;AACjD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACU,OAAD,EAAUC,WAAV,EAAuBC,SAAvB,IAAoCV,aAAa,EAAvD;AACA,QAAMW,QAAQ,GAAGd,MAAM,EAAvB;AAGA,sBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,YAAY,EAAE,MAAMU,aAAa,CAAC,IAAD,CAA3D;AAAmE,IAAA,YAAY,EAAE,MAAMA,aAAa,CAAC,KAAD,CAApG;AAAA,eAEK,CAACE,WAAW,CAACG,MAAZ,GAAqB,CAArB,IAA0BF,SAA3B,kBACI;AAAM,MAAA,KAAK,EAAC,oEAAZ;AAAA,gBACID,WAAW,CAACI,GAAZ,CAAiBC,UAAD,iBACb;AAAK,QAAA,KAAK,EAAC,8BAAX;AAAA,gCACI;AAAA,oBAAIA,UAAU,CAACC;AAAf;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,qBAAIC,IAAI,CAACC,KAAL,CAAWH,UAAU,CAACI,WAAX,GAAyB,GAApC,CAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADH;AADJ;AAAA;AAAA;AAAA;AAAA,YAHT,eAaI;AAAG,MAAA,SAAS,EAAG,6EAA4EZ,UAAU,GAAG,EAAH,GAAQ,QAAS,EAAtH;AAAyH,MAAA,OAAO,EAAE,MAAMF,YAAY,CAACD,KAAD;AAApJ;AAAA;AAAA;AAAA;AAAA,YAbJ,eAcI;AAAG,MAAA,SAAS,EAAG,6EAA4EG,UAAU,GAAG,EAAH,GAAQ,QAAS,EAAtH;AAAyH,MAAA,OAAO,EAAE,MAAME,OAAO,CAACG,QAAQ,CAACQ,OAAV;AAA/I;AAAA;AAAA;AAAA;AAAA,YAdJ,eAeI;AAAK,MAAA,GAAG,EAAER,QAAV;AAAoB,MAAA,OAAO,EAAEN,IAA7B;AAAmC,MAAA,GAAG,EAAEH,KAAxC;AAA+C,MAAA,GAAG,EAAC,QAAnD;AAA4D,MAAA,KAAK,EAAC,MAAlE;AAAyE,MAAA,MAAM,EAAC,MAAhF;AAAuF,MAAA,WAAW,EAAC;AAAnG;AAAA;AAAA;AAAA;AAAA,YAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;GArCSD,K;UAEqCD,a;;;KAFrCC,K;AAsCTA,KAAK,CAACmB,SAAN,GAAkB;AACd;AACA;AACAf,EAAAA,IAAI,EAAEN,SAAS,CAACsB,IAHF;AAIdlB,EAAAA,KAAK,EAAEJ,SAAS,CAACuB,MAJH;AAKdpB,EAAAA,KAAK,EAAEH,SAAS,CAACwB,MALH;AAMdnB,EAAAA,YAAY,EAAEL,SAAS,CAACsB;AANV,CAAlB;AAQA,eAAepB,KAAf","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport useTFClassify from '../utils/hooks/useTFClassify';\r\n\r\nfunction Image({ image, index, handleRemove, show }) {\r\n    const [isHovering, setIsHovering] = useState(false);\r\n    const [predict, predictions, isLoading] = useTFClassify();\r\n    const imageRef = useRef();\r\n\r\n\r\n    return (\r\n        <div className='relative' onMouseEnter={() => setIsHovering(true)} onMouseLeave={() => setIsHovering(false)}>\r\n\r\n            {(predictions.length > 0 || isLoading) &&\r\n                (<span class=\"absolute bg-gray-800 text-white rounded-lg shadow px-2 left-0 ml-5\">\r\n                    {predictions.map((prediction) => (\r\n                        <div class=\"flex justify-between text-sm\">\r\n                            <p>{prediction.className}</p>\r\n                            <p>{Math.floor(prediction.probability * 100)}%</p>\r\n                        </div>\r\n                    ))}\r\n                </span>)\r\n            }\r\n\r\n            <i className={`fas fa-times absolute right-0 cursor-pointer opacity-25 hover:opacity-100 ${isHovering ? '' : 'hidden'}`} onClick={() => handleRemove(index)}></i>\r\n            <i className={`fas fa-search absolute left-0 cursor-pointer opacity-25 hover:opacity-100 ${isHovering ? '' : 'hidden'}`} onClick={() => predict(imageRef.current)}></i>\r\n            <img ref={imageRef} onClick={show} src={image} alt='nature' width='100%' height='auto' crossOrigin='anonymous' />\r\n        </div>\r\n    );\r\n}\r\n// const types = {\r\n//     function(props, propName) {\r\n//         if (typeof props[propName] !== 'function') {\r\n//             return new Error(`'${propName}' must be a function but you have provided ${typeof props[propName]}`);\r\n//         }\r\n//     }, number(props, propName) {\r\n//         if (typeof props[propName] !== 'number') {\r\n//             return new Error(`'${propName}' must be a number but you have provided ${typeof props[propName]}`);\r\n//         }\r\n//     }\r\n\r\n// }\r\nImage.propTypes = {\r\n    // show: types.function,\r\n    // index: types.number,\r\n    show: PropTypes.func,\r\n    index: PropTypes.number,\r\n    image: PropTypes.string,\r\n    handleRemove: PropTypes.func\r\n}\r\nexport default Image;\r\n"]},"metadata":{},"sourceType":"module"}