{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nconst api = process.env.REACT_APP_UNSPLASH_API;\nconst secret = process.env.REACT_APP_UNSPLASH_KEY;\nexport default function useFetchImage(page, searchTerm) {\n  _s();\n\n  const [Images, setImages] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n\n  function fetch() {\n    const url = searchTerm === null ? 'photos?' : `search/photos?query=${searchTerm}&`;\n    axios.get(`${api}/${url}client_id=${secret}&page=${page}`).then(res => {\n      searchTerm === null ? fetchRandom(res) : fetchSearch(res);\n      setisLoading(false);\n    }).catch(e => {\n      setErrors([\"Unable to fetch images\"]);\n      setisLoading(false);\n    });\n  }\n\n  function fetchSearch(res) {\n    page > 1 ? setImages([...Image, ...res.data.results]) : setImages([...res.data.results]);\n  }\n\n  function fetchRandom(res) {\n    setImages([...Images, ...res.data]);\n  }\n\n  useEffect(() => {\n    setisLoading(true); // const url = searchTerm === null ? 'photos' : 'search/photos';\n    // axios.get(`${api}/${url}?client_id=${secret}&page=${page}&query=${searchTerm}`)\n\n    fetch();\n  }, [page, searchTerm]); // useEffect(() => {\n  //     if (searchTerm === null) return;\n  //     setisLoading(true);\n  //     fetch();\n  // }, [searchTerm])\n\n  return [Images, setImages, errors, isLoading];\n}\n\n_s(useFetchImage, \"EmdBHMVYYNOJ5IbKLG7L5ynXt9Q=\");","map":{"version":3,"sources":["D:/React/react-app-exe3/src/utils/hooks/useFetchImage.js"],"names":["axios","useEffect","useState","api","process","env","REACT_APP_UNSPLASH_API","secret","REACT_APP_UNSPLASH_KEY","useFetchImage","page","searchTerm","Images","setImages","errors","setErrors","isLoading","setisLoading","fetch","url","get","then","res","fetchRandom","fetchSearch","catch","e","Image","data","results"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAAxB;AACA,MAAMC,MAAM,GAAGH,OAAO,CAACC,GAAR,CAAYG,sBAA3B;AACA,eAAe,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,UAA7B,EAAyC;AAAA;;AACpD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,KAAD,CAA1C;;AACA,WAASgB,KAAT,GAAiB;AACb,UAAMC,GAAG,GAAIR,UAAU,KAAK,IAAhB,GAAwB,SAAxB,GAAqC,uBAAsBA,UAAW,GAAlF;AACAX,IAAAA,KAAK,CAACoB,GAAN,CAAW,GAAEjB,GAAI,IAAGgB,GAAI,aAAYZ,MAAO,SAAQG,IAAK,EAAxD,EAA2DW,IAA3D,CAAgEC,GAAG,IAAI;AACnEX,MAAAA,UAAU,KAAK,IAAf,GAAsBY,WAAW,CAACD,GAAD,CAAjC,GAAyCE,WAAW,CAACF,GAAD,CAApD;AACAL,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAHD,EAGGQ,KAHH,CAGUC,CAAD,IAAO;AACZX,MAAAA,SAAS,CAAC,CAAC,wBAAD,CAAD,CAAT;AACAE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAND;AAOH;;AACD,WAASO,WAAT,CAAqBF,GAArB,EAA0B;AACtBZ,IAAAA,IAAI,GAAG,CAAP,GAAWG,SAAS,CAAC,CAAC,GAAGc,KAAJ,EAAW,GAAGL,GAAG,CAACM,IAAJ,CAASC,OAAvB,CAAD,CAApB,GAAwDhB,SAAS,CAAC,CAAC,GAAGS,GAAG,CAACM,IAAJ,CAASC,OAAb,CAAD,CAAjE;AAEH;;AACD,WAASN,WAAT,CAAqBD,GAArB,EAA0B;AACtBT,IAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAY,GAAGU,GAAG,CAACM,IAAnB,CAAD,CAAT;AACH;;AAED3B,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,YAAY,CAAC,IAAD,CAAZ,CADY,CAGZ;AACA;;AACAC,IAAAA,KAAK;AACR,GANQ,EAMN,CAACR,IAAD,EAAOC,UAAP,CANM,CAAT,CAtBoD,CA6BpD;AACA;AACA;AACA;AACA;;AAEA,SAAO,CAACC,MAAD,EAASC,SAAT,EAAoBC,MAApB,EAA4BE,SAA5B,CAAP;AACH;;GApCuBP,a","sourcesContent":["import axios from 'axios';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst api = process.env.REACT_APP_UNSPLASH_API;\r\nconst secret = process.env.REACT_APP_UNSPLASH_KEY;\r\nexport default function useFetchImage(page, searchTerm) {\r\n    const [Images, setImages] = useState([]);\r\n    const [errors, setErrors] = useState([]);\r\n    const [isLoading, setisLoading] = useState(false);\r\n    function fetch() {\r\n        const url = (searchTerm === null) ? 'photos?' : `search/photos?query=${searchTerm}&`\r\n        axios.get(`${api}/${url}client_id=${secret}&page=${page}`).then(res => {\r\n            searchTerm === null ? fetchRandom(res) : fetchSearch(res);\r\n            setisLoading(false);\r\n        }).catch((e) => {\r\n            setErrors([\"Unable to fetch images\"]);\r\n            setisLoading(false);\r\n        });\r\n    }\r\n    function fetchSearch(res) {\r\n        page > 1 ? setImages([...Image, ...res.data.results]) : setImages([...res.data.results]);\r\n\r\n    }\r\n    function fetchRandom(res) {\r\n        setImages([...Images, ...res.data]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        setisLoading(true);\r\n\r\n        // const url = searchTerm === null ? 'photos' : 'search/photos';\r\n        // axios.get(`${api}/${url}?client_id=${secret}&page=${page}&query=${searchTerm}`)\r\n        fetch();\r\n    }, [page, searchTerm]);\r\n    // useEffect(() => {\r\n    //     if (searchTerm === null) return;\r\n    //     setisLoading(true);\r\n    //     fetch();\r\n    // }, [searchTerm])\r\n\r\n    return [Images, setImages, errors, isLoading];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}