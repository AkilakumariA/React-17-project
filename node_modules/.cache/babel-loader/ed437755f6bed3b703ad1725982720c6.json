{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nconst api = process.env.REACT_APP_UNSPLASH_API;\nconst secret = process.env.REACT_APP_UNSPLASH_KEY;\nexport default function useFetchImage(page, searchTerm) {\n  _s();\n\n  const [Images, setImages] = useState([]);\n  const [errors, setErrors] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n\n  function fetchSearch() {\n    axios.get(`${api}/search/photos?client_id=${secret}&page=${page}&query=${searchTerm}`).then(res => {\n      setImages([...res.data.results]);\n      setisLoading(false);\n    }).catch(e => {\n      setErrors([\"Unable to fetch images\"]);\n      setisLoading(false);\n    });\n  }\n\n  useEffect(() => {\n    setisLoading(true); // const url = searchTerm === null ? 'photos' : 'search/photos';\n    // axios.get(`${api}/${url}?client_id=${secret}&page=${page}&query=${searchTerm}`)\n\n    axios.get(`${api}/photos?client_id=${secret}&page=${page}`).then(res => {\n      setImages([...Images, ...res.data]);\n      setisLoading(false);\n    }).catch(e => {\n      setErrors([\"Unable to fetch images\"]);\n      setisLoading(false);\n    });\n  }, [page]);\n  useEffect(() => {\n    if (searchTerm == null) return;\n    fetchSearch();\n  }, [searchTerm]);\n  return [Images, setImages, errors, isLoading];\n}\n\n_s(useFetchImage, \"n09J+lNUtfuJNjaWci16db39FNQ=\");","map":{"version":3,"sources":["D:/React/react-app-exe3/src/utils/hooks/useFetchImage.js"],"names":["axios","React","useEffect","useState","api","process","env","REACT_APP_UNSPLASH_API","secret","REACT_APP_UNSPLASH_KEY","useFetchImage","page","searchTerm","Images","setImages","errors","setErrors","isLoading","setisLoading","fetchSearch","get","then","res","data","results","catch","e"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,sBAAxB;AACA,MAAMC,MAAM,GAAGH,OAAO,CAACC,GAAR,CAAYG,sBAA3B;AACA,eAAe,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,UAA7B,EAAyC;AAAA;;AACpD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,KAAD,CAA1C;;AACA,WAASgB,WAAT,GAAuB;AACnBnB,IAAAA,KAAK,CAACoB,GAAN,CAAW,GAAEhB,GAAI,4BAA2BI,MAAO,SAAQG,IAAK,UAASC,UAAW,EAApF,EAAuFS,IAAvF,CAA4FC,GAAG,IAAI;AAC/FR,MAAAA,SAAS,CAAC,CAAC,GAAGQ,GAAG,CAACC,IAAJ,CAASC,OAAb,CAAD,CAAT;AACAN,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAHD,EAGGO,KAHH,CAGUC,CAAD,IAAO;AACZV,MAAAA,SAAS,CAAC,CAAC,wBAAD,CAAD,CAAT;AACAE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAND;AAOH;;AAEDhB,EAAAA,SAAS,CAAC,MAAM;AACZgB,IAAAA,YAAY,CAAC,IAAD,CAAZ,CADY,CAGZ;AACA;;AACAlB,IAAAA,KAAK,CAACoB,GAAN,CAAW,GAAEhB,GAAI,qBAAoBI,MAAO,SAAQG,IAAK,EAAzD,EAA4DU,IAA5D,CAAiEC,GAAG,IAAI;AACpER,MAAAA,SAAS,CAAC,CAAC,GAAGD,MAAJ,EAAY,GAAGS,GAAG,CAACC,IAAnB,CAAD,CAAT;AACAL,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAHD,EAGGO,KAHH,CAGUC,CAAD,IAAO;AACZV,MAAAA,SAAS,CAAC,CAAC,wBAAD,CAAD,CAAT;AACAE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAND;AAOH,GAZQ,EAYN,CAACP,IAAD,CAZM,CAAT;AAaAT,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIU,UAAU,IAAI,IAAlB,EAAwB;AACxBO,IAAAA,WAAW;AAEd,GAJQ,EAIN,CAACP,UAAD,CAJM,CAAT;AAMA,SAAO,CAACC,MAAD,EAASC,SAAT,EAAoBC,MAApB,EAA4BE,SAA5B,CAAP;AACH;;GAlCuBP,a","sourcesContent":["import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst api = process.env.REACT_APP_UNSPLASH_API;\r\nconst secret = process.env.REACT_APP_UNSPLASH_KEY;\r\nexport default function useFetchImage(page, searchTerm) {\r\n    const [Images, setImages] = useState([]);\r\n    const [errors, setErrors] = useState([]);\r\n    const [isLoading, setisLoading] = useState(false);\r\n    function fetchSearch() {\r\n        axios.get(`${api}/search/photos?client_id=${secret}&page=${page}&query=${searchTerm}`).then(res => {\r\n            setImages([...res.data.results]);\r\n            setisLoading(false);\r\n        }).catch((e) => {\r\n            setErrors([\"Unable to fetch images\"]);\r\n            setisLoading(false);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        setisLoading(true);\r\n\r\n        // const url = searchTerm === null ? 'photos' : 'search/photos';\r\n        // axios.get(`${api}/${url}?client_id=${secret}&page=${page}&query=${searchTerm}`)\r\n        axios.get(`${api}/photos?client_id=${secret}&page=${page}`).then(res => {\r\n            setImages([...Images, ...res.data]);\r\n            setisLoading(false);\r\n        }).catch((e) => {\r\n            setErrors([\"Unable to fetch images\"]);\r\n            setisLoading(false);\r\n        });\r\n    }, [page]);\r\n    useEffect(() => {\r\n        if (searchTerm == null) return;\r\n        fetchSearch();\r\n\r\n    }, [searchTerm])\r\n\r\n    return [Images, setImages, errors, isLoading];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}