{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\react-app-exe3\\\\src\\\\page\\\\Tensorflow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport '@tensorflow/tfjs';\nimport * as mobilenet from '@tensorflow-models/mobilenet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tensorflow() {\n  _s();\n\n  const imageRef = useRef();\n  const [isLoading, setIsLoading] = useState(false);\n  const [predictions, setPredictions] = useState(initialState);\n\n  function predit() {\n    const img = imageRef.current;\n    setisLoading(true);\n    mobilenet.load().then(model => {\n      // Classify the image.\n      model.classify(img).then(predictions => {\n        console.log('Predictions: ');\n        console.log(predictions);\n        setisLoading(false);\n      });\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-1/3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center\",\n        children: \"TensorFlow Example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://images.unsplash.com/photo-1587300003388-59208cc962cb?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwyNDI1MTZ8MHwxfHNlYXJjaHw0fHxkb2d8ZW58MHx8fHwxNjI1NTgzNDYy&ixlib=rb-1.2.1&q=80&w=1080\",\n        alt: \"\",\n        width: \"400\",\n        crossOrigin: \"anonymous\",\n        ref: imageRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center my-5\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"p-2 rounded bg-gray-900 text-white w-64\",\n          onClick: predit,\n          children: [isLoading && '⏳', !isLoading && 'Predict Result']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tensorflow, \"X2rE2jJale40RYQ6ts4SDTlpn4c=\");\n\n_c = Tensorflow;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tensorflow\");","map":{"version":3,"sources":["D:/React/react-app-exe3/src/page/Tensorflow.js"],"names":["React","useRef","useState","mobilenet","Tensorflow","imageRef","isLoading","setIsLoading","predictions","setPredictions","initialState","predit","img","current","setisLoading","load","then","model","classify","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAO,kBAAP;AACA,OAAO,KAAKC,SAAZ,MAA2B,8BAA3B;;AAEA,eAAe,SAASC,UAAT,GAAsB;AAAA;;AACjC,QAAMC,QAAQ,GAAGJ,MAAM,EAAvB;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAACQ,YAAD,CAA9C;;AAEA,WAASC,MAAT,GAAkB;AACd,UAAMC,GAAG,GAAGP,QAAQ,CAACQ,OAArB;AACAC,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAX,IAAAA,SAAS,CAACY,IAAV,GAAiBC,IAAjB,CAAsBC,KAAK,IAAI;AAC3B;AACAA,MAAAA,KAAK,CAACC,QAAN,CAAeN,GAAf,EAAoBI,IAApB,CAAyBR,WAAW,IAAI;AACpCW,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYZ,WAAZ;AACAM,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,OAJD;AAKH,KAPD;AAQH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,GAAG,EAAC,mMAAT;AAA6M,QAAA,GAAG,EAAC,EAAjN;AAAoN,QAAA,KAAK,EAAC,KAA1N;AAAgO,QAAA,WAAW,EAAC,WAA5O;AAAwP,QAAA,GAAG,EAAET;AAA7P;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACI;AAAQ,UAAA,SAAS,EAAC,yCAAlB;AAA4D,UAAA,OAAO,EAAEM,MAArE;AAAA,qBACKL,SAAS,IAAI,GADlB,EAEK,CAACA,SAAD,IAAc,gBAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GAhCuBF,U;;KAAAA,U","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport '@tensorflow/tfjs';\r\nimport * as mobilenet from '@tensorflow-models/mobilenet';\r\n\r\nexport default function Tensorflow() {\r\n    const imageRef = useRef();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [predictions, setPredictions] = useState(initialState)\r\n\r\n    function predit() {\r\n        const img = imageRef.current;\r\n        setisLoading(true);\r\n        mobilenet.load().then(model => {\r\n            // Classify the image.\r\n            model.classify(img).then(predictions => {\r\n                console.log('Predictions: ');\r\n                console.log(predictions);\r\n                setisLoading(false);\r\n            });\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className='flex justify-center'>\r\n            <div className='w-1/3'>\r\n                <h1 className='text-center'>TensorFlow Example</h1>\r\n                <img src='https://images.unsplash.com/photo-1587300003388-59208cc962cb?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwyNDI1MTZ8MHwxfHNlYXJjaHw0fHxkb2d8ZW58MHx8fHwxNjI1NTgzNDYy&ixlib=rb-1.2.1&q=80&w=1080' alt='' width='400' crossOrigin='anonymous' ref={imageRef} />\r\n                <div className=\"text-center my-5\">\r\n                    <button className=\"p-2 rounded bg-gray-900 text-white w-64\" onClick={predit}>\r\n                        {isLoading && '⏳'}\r\n                        {!isLoading && 'Predict Result'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}